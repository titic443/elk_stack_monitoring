input {
   beats{
    port => 5044
    add_field => { "source" => "beat" }
    codec => "json"
   }
  # rabbitmq {
  #   host => "35.240.221.226"
  #   port => 5672 
  #   queue => "test2"  
  #   user => "mikelopster" 
  #   password => "password" 
  #   prefetch_count => 10 
  #   ack => true  
  #   durable => true
  #   codec => "json"
  #   add_field => { "queue" => "error_alert" }
  #   arguments => {
  #     "x-max-length" => 10000
  #     "x-overflow" => "reject-publish"
  #     }
  # }
  # rabbitmq {
  #   host => "35.240.221.226"
  #   port => 5672 
  #   queue => "connection_logs"  
  #   user => "mikelopster" 
  #   password => "password" 
  #   prefetch_count => 10 
  #   ack => true  
  #   durable => "true"
  #   codec => "json"
  #   add_field => { "queue" => "connection_logs" }
  #   arguments => {
  #     "x-max-length" => 10000
  #     "x-overflow" => "reject-publish"
  #   }
  # }
  file {
    mode => "tail"
    path => "/usr/share/logstash/ingest_data/*"
    codec => "json"
    add_field => { "inp" => "file" }
  }
}

filter {
  if [source] == "beat" {
    json {
      source => "[event][original]"
      target => "parsed_log"
      remove_field => ["[event][original]"]
    }
    json {
        source => "[parsed_log][msg]"
        target => "parsed_json"
        remove_field => ["parsed_log"]
    }
    # if [parsed_json][level] == "info" {
    #   json {
    #     source => "[parsed_json]"
    #     target => "Log"
    #     remove_field => ["parsed_json"]
    #   }  
    # } else if [parsed_json][level] == "error" {
    #   json {
    #     source => "[parsed_json]"
    #     target => "Log"
    #     remove_field => ["parsed_json"]
    #   }
    #  }
    mutate {
      add_field => {
        "[Log][level]" => "%{level}"
        "[Log][caller]" => "%{[caller]}"
        "[Log][timestamp]" => "%{[timestamp]}"
        "[Log][stream]" => "%{stream}"
        "[Log][service]" => "%{[parsed_json][NameService]}"
        "[Log][message]" => "%{[parsed_json][Data]}"
        "type" => "%{[container][name]}"
      }
    }
  }
  if [queue] == "error_alert" {
    if ![NameService] {
      mutate {
        add_field => { "NameService" => "unknown" }
      }
    }
  } else if [queue] == "connection_logs" {
    if ![NameService] {
      mutate {
        add_field => { "NameService" => "unknown" }
      }
    }
  }
  # if [source] == "rabbitmq" {
  #   if [queue] == "error_alert" {
  #     mutate {
  #       add_field => { "queue" => "error_alert" }
  #     }
  #     if ![NameService] {
  #       mutate {
  #         add_field => { "NameService" => "unknown" }
  #       }
  #     }  
  #   } else if [queue] == "connection_logs" {
  #     mutate {
  #       add_field => { "queue" => "connection_logs" }
  #     }
  #     if ![NameService] {
  #       mutate {
  #         add_field => { "NameService" => "unknown" }
  #       }
  #     }  
  #   }
  # }

}

output {  
  if [queue] == "error_alert" {
    elasticsearch {
      hosts=> "${ELASTIC_HOSTS}"
      user=> "${ELASTIC_USER}"
      password=> "${ELASTIC_PASSWORD}"
      cacert=> "certs/ca/ca.crt"
      index => "error_alert_%{NameService}%{+YYYY.MM.DD}"
    }
  } else if [queue] == "connection_logs" {
    elasticsearch {
      hosts=> "${ELASTIC_HOSTS}"
      user=> "${ELASTIC_USER}"
      password=> "${ELASTIC_PASSWORD}"
      cacert=> "certs/ca/ca.crt"
      index => "connections_%{NameService}_%{+YYYY.MM.DD}"
    }
  } else if [NameService] == "unknown" {
    elasticsearch {
      hosts=> "${ELASTIC_HOSTS}"
      user=> "${ELASTIC_USER}"
      password=> "${ELASTIC_PASSWORD}"
      cacert=> "certs/ca/ca.crt"
      index => "rabbit_unknown%{+YYYY.MM.DD}"
    }
  } else if [type] == "admiring_goldstine" {
    elasticsearch {
      hosts=> "${ELASTIC_HOSTS}"
      user=> "${ELASTIC_USER}"
      password=> "${ELASTIC_PASSWORD}"
      cacert=> "certs/ca/ca.crt"
      index => "logsfilexxx_%{+YYYY.MM.dd}"
    }
  } 
    stdout {
      codec => "rubydebug" 
    }
}
