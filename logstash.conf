input {
   beats{
    port => 5044
    add_field => { "source" => "beat" }
    codec => "json"
   }
  # rabbitmq {
  #   host => "35.240.221.226"
  #   port => 5672 
  #   queue => "test2"  
  #   user => "mikelopster" 
  #   password => "password" 
  #   prefetch_count => 10 
  #   ack => true  
  #   durable => true
  #   codec => "json"
  #   add_field => { "queue" => "error_alert" }
  #   arguments => {
  #     "x-max-length" => 10000
  #     "x-overflow" => "reject-publish"
  #     }
  # }
  # rabbitmq {
  #   host => "35.240.221.226"
  #   port => 5672 
  #   queue => "connection_logs"  
  #   user => "mikelopster" 
  #   password => "password" 
  #   prefetch_count => 10 
  #   ack => true  
  #   durable => "true"
  #   codec => "json"
  #   add_field => { "queue" => "connection_logs" }
  #   arguments => {
  #     "x-max-length" => 10000
  #     "x-overflow" => "reject-publish"
  #   }
  # }
  file {
    mode => "tail"
    path => "/usr/share/logstash/ingest_data/*"
    codec => "json"
    add_field => { "inp" => "file" }
  }
}

filter {
  mutate {
    gsub => [
      "event.original", \"{\", "\\"  # Correct way to define gsub operations
    ]
  }

  json {
    source => "event.original"
    target => "parsed_json"  # Store parsed fields under "parsed_json"
    # remove_field => ["event.original"]  # Optional: Remove original field
  }
  if [inp] == "file" {

    # mutate {
    #   gsub => {
    #     "original", '\"', '"'  # Replacing double backslashes with single
    #   }
    # }
    #   gsub => {
    #     "original", '\\\\"', '"' # Replacing \" with "
    #   }
    # }

    # mutate{
    #   remove_field => ["message"]
    # }
    # json {
    #   source => "message"
    #   target => "parsed_message"
    # }
    # json {
    #   source => "[parsed_message][log]"
    #   target => "parsed_log"
    #   remove_field => ["message"]
    # }
  }
  if [queue] == "error_alert" {
    if ![NameService] {
      mutate {
        add_field => { "NameService" => "unknown" }
      }
    }
  } else if [queue] == "connection_logs" {
    if ![NameService] {
      mutate {
        add_field => { "NameService" => "unknown" }
      }
    }
  }
  # if [source] == "rabbitmq" {
  #   if [queue] == "error_alert" {
  #     mutate {
  #       add_field => { "queue" => "error_alert" }
  #     }
  #     if ![NameService] {
  #       mutate {
  #         add_field => { "NameService" => "unknown" }
  #       }
  #     }  
  #   } else if [queue] == "connection_logs" {
  #     mutate {
  #       add_field => { "queue" => "connection_logs" }
  #     }
  #     if ![NameService] {
  #       mutate {
  #         add_field => { "NameService" => "unknown" }
  #       }
  #     }  
  #   }
  # }


  # if [@metadata][beat] {
  #   if [@metadata][beat] == "filebeat" {
  # }
}

output {  
  if [queue] == "error_alert" {
    elasticsearch {
      hosts=> "${ELASTIC_HOSTS}"
      user=> "${ELASTIC_USER}"
      password=> "${ELASTIC_PASSWORD}"
      cacert=> "certs/ca/ca.crt"
      index => "error_alert_%{NameService}%{+YYYY.MM.DD}"
    }
  } else if [queue] == "connection_logs" {
    elasticsearch {
      hosts=> "${ELASTIC_HOSTS}"
      user=> "${ELASTIC_USER}"
      password=> "${ELASTIC_PASSWORD}"
      cacert=> "certs/ca/ca.crt"
      index => "connections_%{NameService}_%{+YYYY.MM.DD}"
    }
  } else if [NameService] == "unknown" {
    elasticsearch {
      hosts=> "${ELASTIC_HOSTS}"
      user=> "${ELASTIC_USER}"
      password=> "${ELASTIC_PASSWORD}"
      cacert=> "certs/ca/ca.crt"
      index => "rabbit_unknown%{+YYYY.MM.DD}"
    }
  } else {
    elasticsearch {
      hosts=> "${ELASTIC_HOSTS}"
      user=> "${ELASTIC_USER}"
      password=> "${ELASTIC_PASSWORD}"
      cacert=> "certs/ca/ca.crt"
      index => "logsfile-%{+YYYY.MM.dd}"
    }    
  }
  stdout {
    codec => "rubydebug"  # Useful for debugging and inspecting data
  }
}
